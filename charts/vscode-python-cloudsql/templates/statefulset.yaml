{{- $fullName := include "library-chart.fullname" . -}}
{{- $teamName := trimSuffix "-data-admins" (trimSuffix "-developers" .Values.dapla.group) }}
{{- $bucketEnv := dict "dev" "test" "test" "test" "prod" "prod" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "library-chart.fullname" . }}
  annotations:
    dapla.ssb.no/enable-ssbucketeer: "true"
    dapla.ssb.no/impersonate-group: {{ quote .Values.dapla.group }}
    dapla.ssb.no/service-container-name: {{ quote .Chart.Name }}
    dapla.ssb.no/access-reason: {{ quote .Values.dapla.sourceData.reason }}
    dapla.ssb.no/requested-service-duration: {{ quote .Values.dapla.sourceData.requestedDuration }}
    dapla.ssb.no/mount-standard-buckets: {{ quote .Values.avansert.data.mountStandard }}
    dapla.ssb.no/mount-shared-buckets: {{ .Values.dapla.sharedBuckets | toJson | quote }}
    dapla.ssb.no/service-catalog: experimental
  labels:
    {{- include "library-chart.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  {{- if .Values.global.suspend }}
  replicas: 0
  {{- else }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
{{- end }}
  serviceName: {{ include "library-chart.fullname" . }}
  selector:
    matchLabels:
      {{- include "library-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        dapla.ssb.no/service-catalog: experimental
        {{- if .Values.gitConfig.git.enabled }}
        checksum/git: {{ include (print $.Template.BasePath "/secret-git.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.oidc.enabled }}
        checksum/oidc: {{ include (print $.Template.BasePath "/secret-oidc.yaml") . | sha256sum }}
        {{- end }}
        {{- if (include "library-chart.repository.enabled"  .) }}
        checksum/repository: {{ include (print $.Template.BasePath "/configmap-repository.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "library-chart.selectorLabels" . | nindent 8 }}
    spec:
      volumes:
        - name: home
        {{- if .Values.diskplass.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.diskplass.existingClaim | default (include "library-chart.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        - {{ include "library-chart.oauth2ProxyVolume" . | indent 10 | trim }}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 128Mi
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "library-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "europe-north1-docker.pkg.dev/artifact-registry-5n/dapla-lab-docker/onyxia/vscode-python:{{ .Values.tjeneste.version }}"
          command: ["/bin/sh","-c"]
          args: ["{{ .Values.init.standardInitPath }} /usr/bin/code-server --host 0.0.0.0 \
          --auth none --disable-file-downloads --disable-telemetry --disable-update-check --extensions-dir /home/{{ .Values.environment.user }}/.local/share/code-server/extensions --user-data-dir /home/{{ .Values.environment.user }}/work/.local/share/code-server"]
          imagePullPolicy: {{ .Values.tjeneste.image.pullPolicy }}
          env:
            {{- include "library-chart.commonEnvVars" . | nindent 12 }}
            {{- if .Values.init.regionInit }}
            - name: REGION_INIT_SCRIPT
              value: {{ .Values.init.regionInit }}
            {{- end }}
            {{- if .Values.init.regionInitCheckSum }}
            - name: REGION_INIT_SCRIPT_CHECKSUM
              value: {{ .Values.init.regionInitCheckSum }}
            {{- end }}
            {{- if .Values.avansert.startupScript.scriptPath }}
            - name: PERSONAL_INIT_SCRIPT
              value: {{ .Values.avansert.startupScript.scriptPath }}
            {{- end }}
            {{- if .Values.avansert.startupScript.scriptArgs }}
            - name: PERSONAL_INIT_ARGS
              value: {{ .Values.avansert.startupScript.scriptArgs }}
            {{- end }}
            {{- if .Values.userPreferences.darkMode }}
            - name: DARK_MODE
              value: "true"
            {{- end }}
            - name: DAPLA_ENVIRONMENT
              value: {{ .Values.deployEnvironment }}
            - name: DAPLA_REGION
              value: DAPLA_LAB
            - name: DAPLA_SERVICE
              value: VS_CODE
            - name: PASSWORD
              value: ""
            - name: PROJECT_USER
              value: {{ .Values.environment.user }}
            - name: PROJECT_GROUP
              value: {{ .Values.environment.group }}
            - name: ROOT_PROJECT_DIRECTORY
              value: /home/{{ .Values.environment.user }}/work
            - name: POETRY_VIRTUALENVS_IN_PROJECT
              value: "true"
            - name: JUPYTER_CONFIG_DIR
              value: /home/{{ .Values.environment.user }}/work/.jupyter
            - name: JUPYTER_DATA_DIR
              value: /home/{{ .Values.environment.user }}/work/.local/share/jupyter
            - name: JUPYTER_PATH
              value: /home/{{ .Values.environment.user }}/work/.local/share/jupyter
            - name: JUPYTER_RUNTIME_DIR
              value: /home/{{ .Values.environment.user }}/work/.local/share/jupyter/runtime
            - name: PIPX_HOME
              value: /home/{{ .Values.environment.user }}/work/.local/pipx
            - name: PIPX_BIN_DIR
              value: /home/{{ .Values.environment.user }}/work/.local/pipx/bin
            - name: LABID_TOKEN_EXCHANGE_URL
              value: http://labid.labid.svc.cluster.local/token
            - name: STATBANK_BASE_URL
              value: {{ .Values.statbankBaseUrl }}
            - name: STATBANK_ENCRYPT_URL
              value: {{ .Values.statbankEncryptUrl }}
            - name: STATBANK_TEST_BASE_URL
              value: {{ .Values.statbankTestBaseUrl }}
            - name: STATBANK_TEST_ENCRYPT_URL
              value: {{ .Values.statbankTestEncryptUrl }}
            - name: SUV_DAPLA_API_URL
              value: {{ .Values.suvDaplaApiUrl }}
            - name: PSEUDO_SERVICE_URL
              value: {{ .Values.pseudoServiceUrl }}
            - name: MASKINPORTEN_TOKEN_URL
              value: {{ .Values.maskinportenGuardianUrl }}
            - name: DAPLA_USER
              value: {{ .Values.daplaUser }}
          envFrom:
            {{- if .Values.oidc.enabled }}
            - secretRef:
                name: {{ include "library-chart.secretNameOidc" . }}
            {{- end }}
            {{- if .Values.gitConfig.git.enabled }}
            - secretRef:
                name: {{ include "library-chart.secretNameGit" . }}
            {{- end }}
            {{- if (include "library-chart.repository.enabled"  .) }}
            - configMapRef:
                name: {{ include "library-chart.configMapNameRepository" . }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.networking.service.port }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.networking.service.port }}
          resources:
            requests:
              cpu: {{ .Values.resources.cpu }}
              memory: {{ .Values.resources.memory }}
            limits:
              memory: {{ .Values.resources.memory }}
          volumeMounts:
            - mountPath: /home/{{ .Values.environment.user}}/work
              subPath: work
              name: home
            - mountPath: /dev/shm
              name: dshm
        - {{ include "library-chart.oauth2ProxyPod" . | indent 10 | trim }}
      
      {{- if .Values.database.cloudSqlProxy.enabled }}
      initContainers:
        - name: cloud-sql-proxy
          restartPolicy: Always
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest
          args:
            - "--private-ip"
            - "--auto-iam-authn"
            - "--structured-logs"
            - "--port=5432"
            - {{ .Values.database.cloudSqlProxy.instance }}
      {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- $affinityYaml := include "library-chart.nodeAffinity" (dict "cpu" (.Values.resources.cpu | trimSuffix "m") "memory" (.Values.resources.memory | trimSuffix "Gi")) }}
      {{- if $affinityYaml }}
      affinity:
        {{- $affinityYaml | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
